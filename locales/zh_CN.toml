_version = 1

# [install] ------------------------------------------------------
[install]
desc = """
∙ Rustc：安装 rustc 编译器
∙ Cargo：安装 Cargo 包管理器
∙ Git：安装 Git 版本控制系统
∙ All：安装所有依赖项（包括：[Rustc, Cargo, Git, All Underlayer]）
∙ Default：安装默认依赖项（包括：[Rustc, Cargo, Git, Makepad, GenUI]）
⚠ 请保证您的网络连接正常
"""
check = "检测: %{current} ░ [ %{num} / %{total} ]"
check_title = "检测环境依赖项"
select = "请选择您要安装的选项"
install = "🚀 开始安装: %{name}"
installed = "✅ %{name} 安装成功!"
uninstalled = "❌ %{name} 未安装!"
install_err = "❌ %{name} 安装失败! 请尝试手动安装。"
confirm = "🎉 安装 %{name} 结束!"

# [wasm] ----------------------------------------------------------
[wasm]
desc = """
∙ 目前仅支持 makepad/gen_ui wasm
∙ 您可以直接在 makepad/gen_ui 项目中运行
∙ 如果项目位于 Rust 工作区，请使用 -p 指向目标项目
∙ 或者，您可以运行 `ract wasm` 来构建并启动
"""
package = "📦 wasm 已经进行打包"
start = "🚀 正在为您启动 wasm"
stop = "⚠ wasm 已停止运行"
port = "输入 wasm 的端口"
port_err = "❌ 端口解析错误, 原因: %{reason}"
placeholder = "端口范围：[1 ~ 65535]，建议：[8010 ~ 65535]，默认：8010"
no_ract_conf = "请确保您的项目根目录有一个 `.ract` 文件来指向项目类型"
stop_unexpected = "⚠ wasm 意外停止运行, 原因: %{reason}"

# [studio] ----------------------------------------------------------
[studio]
desc = """
∙ 目前 `studio` 仅适用于 Makepad\n
∙ 支持 WASM 和 GUI\n
∙ 默认启用 GUI 模式
"""
check = "正在为您检测 studio 所需环境..."
gui = "🚀 正在为您使用 GUI 模式运行 studio"
stop = "⚠ studio 已停止运行"
error = "❌ studio 运行失败, 原因: %{reason}"
select = "使用默认的 studio 运行或进行指定?"
placeholder = "请输入 studio 的路径"
custom = "指定 studio 的路径: %{path}"

# [uninstall] ------------------------------------------------------
[uninstall]
select = "您确定要卸载 %{name} 吗?"
success = "✅ 卸载 %{name} 成功!"
failed = "❌ 卸载 %{name} 失败, 原因: %{reason}"

# [add] ------------------------------------------------------------
[add]
write_in_toml_fail = "❌ 将 %{name} 写入 `gen_ui.toml` 文件失败!"
complete = "🎉 添加插件: %{name} 成功!"

[add.download]
success = "🎉 下载插件: %{name} 成功!"
failed = "❌ 下载插件失败, 原因: %{reason}"
waiting = "🔸 正在下载插件: %{name} 请等待..."

# [config] ------------------------------------------------------------
[config]
desc = """
• env: `.env` 是 Ract 对 `env.toml` 的指向文件
• env.toml: `env.toml` 是 Ract 的环境配置文件，由这个文件中的内容 Ract 可以找到使用者开发时的环境依赖项
文档: https://privoce.github.io/GenUI.github.io/zh/doc/config/env
"""

[config.load]
success = "✅ 加载配置成功!"
# [check] -------------------------------------------------------------
[check]
desc = """
检查所需工具和依赖项是否已安装。选项包括:
• Basic: [cargo, rustc, git]
• Underlayer: [makepad (gen_ui, makepad)]
• All: 包含基础工具和底层工具。
"""
complete = "🎉 检测完成!"
[check.found]
success = "✅ 成功检测到 %{name}!"
success_path = "✅ 成功检测到 %{name} 路径: %{path}"
failed = "❌ 未检测到 %{name}! 您可以使用`ract install`命令来安装它。"

[check.select]
which = "您需要检测哪个选项?"

[check.dep]
success = "✅ %{name} 已安装!"
failed = "❌ %{name} 未安装, 请安装后重试!"

# [init] ----------------------------------------------------------------
[init]
start = "🚀 Ract 正在初始化, 请稍等..."
complete = "🎉 Ract 初始化完成!"

[init.chain]
title = "初始化工具链包"
success = "✅ 初始化工具链包成功!"
failed = "❌ 初始化工具链包失败, 原因: %{reason}"

[init.env]
title = "初始化环境文件"
desc = "Ract会帮助您构建一个环境配置文件。"
success = "✅ 初始化环境文件成功!"
failed = "❌ 初始化环境文件失败, 原因: %{reason}"

# [error] ---------------------------------------------------------------
[error]
parse = "❌ 解析: %{ty} 失败。\n目标: %{target}\n原因: %{reason}"


# [common] -------------------------------------------------------------
[common]
os = "操作系统"
version = "版本"
arch = "架构"
language = "语言"
total = "总耗时"
doc = "文档"
tmp_store = "临时存储: %{value}"

[common.command]
select = "选择以下选项进行处理"
quit = ":q 退出"
write_quit = ":wq 写入并退出"
write = ":w 写入"

[common.help]
select = "按 ↑/↓ 进行选项调整，按回车键进行确认选择，按 'q' 退出"
multi_select = "按 ↑/↓ 进行选项调整，按空格进行选择，按回车键进行确认，按 'q' 退出"
log_tab = "按 'l' 进行模块的切换，当为日志模块时进行日志标签页切换，按 'q' 退出"

[common.help.edit]
normal = "按 'i' 进入编辑模式"
complex = "按 ←/→ 进行面板调整，按 ↑/↓ 进行选项调整，按 'i' 进入编辑模式，按 ESC 退出编辑，按 'q' 退出"

[common.fs]

[common.fs.read]
success = "✅ 读取文件%{name}成功!"
failed = "❌ 读取文件失败, 原因: %{reason}"

[common.fs.write]
success = "✅ 写入文件%{name}成功!"
failed = "❌ 写入文件失败, 原因: %{reason}"

[common.option]
default = "默认"
custom = "指定"
yes = "是"
no = "否"
