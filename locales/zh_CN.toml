_version = 1

# [project] -----------------------------------------------------------
[project]
desc = """
∙ 现在您可以运行 makepad 和 gen_ui（即将推出）项目了。
∙ 请确保您的项目根目录下有一个 `.ract` 文件，用于指向项目类型。
∙ 如果您不知道 `.ract` 文件，请运行 `ract book` 进行搜索（即将推出）。
"""
start = "🚀 开始运行项目 ..."
stop = "🛑 停止该项目 ..."
err = "❌ 运行项目失败: %{reason}"

# [package] -------------------------------------------------------
[package]
desc = """
∙ Ract 将检查 `cargo-packager` 是否已安装
∙ Ract 将帮助您安装 `cargo-packager`
∙ Ract 目前不支持交叉编译，如有需要，请使用我们的远程服务（即将推出）
∙ 配置信息: https://docs.crabnebula.dev/packager/
"""
installed = "✅ cargo-packager 已成功安装!"
uninstalled = "❗️cargo-packager 尚未安装!"
install_err = "❌ 安装 cargo-packager 失败: %{reason}"
init = """
∙ init: Ract 将帮助您初始化一个简单的打包配置
∙ skip: Ract 将直接根据配置运行包
∙ 如果您想定义更多细节，请自行修改 Cargo.toml
"""
start = "📦 正在进行打包中"
confirm = "🎉 恭喜! 当前项目已打包完成!"
package_resourced = """
∙ 🎉 包资源已生成! 
∙ 您可以看到用于打包设置的 `Cargo.toml` 和用于包资源的 `packaging dir`! 
"""
err = "❌ 打包失败! 请检查错误信息!"
configing = "📦 正在处理打包的资源..."

# [create] --------------------------------------------------------
[create]
workspace = "🎉 您的项目已成功创建!"
git = "🚀 成功创建新的 git 项目!"
git_err = "❌ 创建新的 git 项目失败!"
cargo = "🚀 成功创建新的 Cargo 项目!"
cargo_err = "❌ 创建新的 Cargo 项目失败!"
cancel = "❗️取消创建项目!"
confirm = "🎉 您的项目已成功创建!"

# [compiler] ------------------------------------------------------
[compiler]
log_init = "🔧 日志服务已成功启动! `app event::Change`触发会产生新的日志条目"
watcher_init = "🔧 Watcher 服务已成功启动! Ract 正在监听: `%{path}`"
compiled = "🎉 编译成功! %{path} 已编译完成!"
write_cache = "✅ 缓存服务: 缓存文件写入成功!"
# [install] ------------------------------------------------------
[install]
desc = """
∙ Rustc: 安装 rustc 编译器
∙ Cargo: 安装 Cargo 包管理器
∙ Git: 安装 Git 版本控制系统
∙ All: 安装所有依赖项（包括: [Rustc, Cargo, Git, All Underlayer]）
∙ Default: 安装默认依赖项（包括: [Rustc, Cargo, Git, Makepad, GenUI]）
⚠ 请保证您的网络连接正常
"""
check = "检测: %{current} ░ [ %{num} / %{total} ]"
check_title = "检测环境依赖项"
select = "请选择您要安装的选项"
install = "🚀 开始安装: %{name}"
installed = "✅ %{name} 安装成功!"
uninstalled = "❌ %{name} 未安装!"
install_err = "❌ %{name} 安装失败! 请尝试手动安装。"
confirm = "🎉 安装 %{name} 结束!"
makepad_studio = "ℹ 你可以 cd 到 makepad 目录，然后使用 `cargo run -p makepad-studio --release` 来打开 makepad studio。或者，你也可以使用 `ract run` 来打开 makepad studio。"
cargo_makepad_err = "❗️Cargo Makepad 未安装，请先安装！如果出现此错误，请更新 Makepad"
makepad_android = "ℹ 您可以使用 `cargo makepad android run -p ${project_name} --release` 来运行项目"
xcode_conf_err = "❗️ Xcode 命令行工具已安装，但配置不正确。请运行“xcode-select --install”完成设置。"
xcode_select_err = "❗️ xcode-select 未安装，请先安装！"
makepad_ios = """
ℹ 您可以使用 `cargo makepad apple ios --org=my.test --app=${project_name} run-sim -p ${project_name} --release` 来运行项目
有关更多信息，请参阅：https://github.com/syf20020816/makepad/tree/rik?tab=readme-ov-file#5-ios-setup--install"
"""
makepad_wasm = "ℹ 您可以使用 `cargo makepad wasm run -p ${project_name} --release` 来运行项目"
makepad_wait_install = "❗️ Makepad 未安装，现在安装 Makepad"
makepad_help = "ℹ 您可以使用 `cargo makepad -h` 查看帮助信息"
# [wasm] ----------------------------------------------------------
[wasm]
desc = """
∙ 目前仅支持 makepad/gen_ui wasm
∙ 您可以直接在 makepad/gen_ui 项目中运行
∙ 如果项目位于 Rust 工作区，请使用 -p 指向目标项目
∙ 或者，您可以运行 `ract wasm` 来构建并启动
"""
package = "📦 wasm 已经进行打包"
start = "🚀 正在为您启动 wasm"
stop = "⚠ wasm 已停止运行"
port = "输入 wasm 的端口"
port_err = "❌ 端口解析错误, 原因: %{reason}"
placeholder = "端口范围: [1 ~ 65535]，建议: [8010 ~ 65535]，默认: 8010"
no_ract_conf = "请确保您的项目根目录有一个 `.ract` 文件来指向项目类型"
stop_unexpected = "⚠ wasm 意外停止运行, 原因: %{reason}"

# [studio] ----------------------------------------------------------
[studio]
desc = """
∙ 目前 `studio` 仅适用于 Makepad\n
∙ 支持 WASM 和 GUI\n
∙ 默认启用 GUI 模式
"""
check = "正在为您检测 studio 所需环境..."
gui = "🚀 正在为您使用 GUI 模式运行 studio"
stop = "⚠ studio 已停止运行"
error = "❌ studio 运行失败, 原因: %{reason}"
select = "使用默认的 studio 运行或进行指定?"
placeholder = "请输入 studio 的路径"
custom = "指定 studio 的路径: %{path}"

# [uninstall] ------------------------------------------------------
[uninstall]
select = "您确定要卸载 %{name} 吗?"
success = "✅ 卸载 %{name} 成功!"
failed = "❌ 卸载 %{name} 失败, 原因: %{reason}"

# [add] ------------------------------------------------------------
[add]
write_in_toml_fail = "❌ 将 %{name} 写入 `gen_ui.toml` 文件失败!"
complete = "🎉 添加插件: %{name} 成功!"

[add.download]
success = "🎉 下载插件: %{name} 成功!"
failed = "❌ 下载插件失败, 原因: %{reason}"
waiting = "🔸 正在下载插件: %{name} 请等待..."

# [config] ------------------------------------------------------------
[config]
desc = """
• env: `.env` 是 Ract 对 `env.toml` 的指向文件
• env.toml: `env.toml` 是 Ract 的环境配置文件，由这个文件中的内容 Ract 可以找到使用者开发时的环境依赖项
文档: https://privoce.github.io/GenUI.github.io/zh/doc/config/env
"""

[config.load]
success = "✅ 加载配置成功!"
# [check] -------------------------------------------------------------
[check]
desc = """
检查所需工具和依赖项是否已安装。选项包括:
• Basic: [cargo, rustc, git]
• Underlayer: [makepad (gen_ui, makepad)]
• All: 包含基础工具和底层工具。
"""
complete = "🎉 检测完成!"
unsupported = "∙ 当前工具链不受支持！您应该使用 `ract install` 来安装工具链，或者使用 `ract config` 来设置环境变量。"
[check.found]
success = "✅ 成功检测到 %{name}!"
success_path = "✅ 成功检测到 %{name} 路径: %{path}"
failed = "❌ 未检测到 %{name}! 您可以使用`ract install`命令来安装它。"

[check.select]
which = "您需要检测哪个选项?"

[check.dep]
success = "✅ %{name} 已安装!"
failed = "❌ %{name} 未安装, 请安装后重试!"

# [init] ----------------------------------------------------------------
[init]
start = "🚀 Ract 正在初始化, 请稍等..."
complete = "🎉 Ract 初始化完成!"

[init.chain]
title = "初始化工具链包"
success = "✅ 初始化工具链包成功!"
failed = "❌ 初始化工具链包失败, 原因: %{reason}"

[init.env]
title = "初始化环境文件"
desc = "Ract会帮助您构建一个环境配置文件。"
success = "✅ 初始化环境文件成功!"
failed = "❌ 初始化环境文件失败, 原因: %{reason}"

# [error] ---------------------------------------------------------------
[error]
parse = "❌ 解析: %{ty} 失败。\n目标: %{target}\n原因: %{reason}"


# [common] -------------------------------------------------------------
[common]
os = "操作系统"
version = "版本"
arch = "架构"
language = "语言"
total = "总耗时"
tmp_store = "临时存储: %{value}"

[common.command]
select = "选择以下选项进行处理"
quit = ":q 退出"
write_quit = ":wq 写入并退出"
write = ":w 写入"

[common.help]
select = "按 ↑/↓ 进行选项调整，按回车键进行确认选择，按 'q' 退出"
multi_select = "按 ↑/↓ 进行选项调整，按空格进行选择，按回车键进行确认，按 'q' 退出"
log_tab = "按 'l' 进行模块的切换，当为日志模块时进行日志标签页切换，按 'q' 退出"

[common.help.edit]
normal = "按 'i' 进入编辑模式"
complex = "按 ←/→ 进行面板调整，按 ↑/↓ 进行选项调整，按 'i' 进入编辑模式，按 ESC 退出编辑，按 'q' 退出"

[common.fs]

[common.fs.read]
success = "✅ 读取文件%{name}成功!"
failed = "❌ 读取文件失败, 原因: %{reason}"

[common.fs.write]
success = "✅ 写入文件%{name}成功!"
failed = "❌ 写入文件失败, 原因: %{reason}"

[common.option]
default = "默认"
custom = "指定"
yes = "是"
no = "否"
